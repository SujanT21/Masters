predicted_values = a + b * youtube
predicted_values = a + b * marketing$youtube
Residual_values = predicted_sales - observed_sales
predicted_sales = a + b * marketing$youtube
residual_values = predicted_sales - observed_sales
residual_values = observed_sales - predicted_sales
ggplot(NULL, mapping = (x = predicted_sales, y = observed_sales)) +
ggplot(NULL, mapping = aes(x = predicted_sales, y = observed_sales)) +
geom_point()
ggplot(NULL, mapping = aes(x = predicted_sales, y = observed_sales)) +
geom_point() +
coord_fixed()
ggplot(NULL, mapping = aes(x = predicted_sales, y = residual_sales)) +
geom_point() +
coord_fixed()
ggplot(NULL, mapping = aes(x = predicted_sales, y = residual_values)) +
geom_point() +
coord_fixed()
ggplot(NULL, mapping = aes(x = predicted_sales, y = residual_values)) +
geom_point()
ggplot(NULL, mapping = aes(x = predicted_sales, y = residual_values)) +
geom_point() +
coord_fixed()
ggplot(NULL, mapping = aes(x = predicted_sales, y = residual_values)) +
geom_point()
ggplot(NULL) +
geom_point(mapping = aes(x = predicted_sales, y = residual_values, color = 'blue'))
ggplot(NULL) +
geom_point(mapping = aes(x = predicted_sales, y = residual_values, colors = 'blue'))
ggplot(NULL) +
geom_point(mapping = aes(x = predicted_sales, y = residual_values, colours = 'blue'))
ggplot(NULL) +
geom_point(mapping = aes(x = predicted_sales, y = residual_values, colour = 'blue'))
ggplot(NULL) +
geom_point(mapping = aes(x = predicted_sales, y = residual_values, colour = 'blue')) +
geom_point(mapping = aes(x = predicted_sales, y = observed_sales, colour = 'red'))
ggplot(NULL) +
geom_point(mapping = aes(x = predicted_sales, y = residual_values, colour = 'red')) +
geom_point(mapping = aes(x = predicted_sales, y = observed_sales, colour = 'blue'))
summary(model)
model = lm(sales~youtube + facebook, data = marketing)
summary(model)
library(broom)
augment(model)
augment(model) %>%
ggplot(NULL, mapping = aes(x = .fitted, y = .resid)) +
geom_point()
model = lm(sales~youtube, data = marketing)
summary(model)
library(broom)
augment(model) %>%
ggplot(NULL, mapping = aes(x = .fitted, y = .resid)) +
geom_point()
install.packages("ggfortify")
#install.packages("ggfortify")
library (ggfortify)
autoplot(model)
model = lm(sales~youtube + facebook, data = marketing)
summary(model)
autoplot(model)
summary(model)
augment(model) %>%
ggplot(NULL, mapping = aes(x = .fitted, y = .resid)) +
geom_point()
install.packages("ISLR") # run only once
library(tidyverse)
library(ISLR)
credit = as_tibble(Credit)
credit = select(credit,Balance,Limit,Income)
summary(credit)
model <- lm(credit)
summary(model)
augment(model) %>%
ggplot(NULL, x = .fitted, y = .resid) +
geom_point()
augment(model) %>%
ggplot(NULL, mapping = aes)x = .fitted, y = .resid)) +
augment(model) %>%
ggplot(NULL, mapping = aes(x = .fitted, y = .resid)) +
geom_point()
autoplot(model)
credit = as_tibble(Credit)
model <- lm(credit$Balance~Limit)
summary(model)
augment(model) %>%
ggplot(NULL, mapping = aes(x = .fitted, y = .resid)) +
geom_point()
autoplot(model)
model <- lm(credit$Balance~Limit)
model <- lm(credit$Balance~Credit$Limit)
model <- lm(credit$Balance ~ credit$Limit)
summary(model)
augment(model) %>%
ggplot(NULL, mapping = aes(x = .fitted, y = .resid)) +
geom_point()
autoplot(model)
model <- lm(credit)
summary(model)
model <- lm(credit$Balance ~ credit$Limit + credit$Income)
summary(model)
augment(model) %>%
ggplot(NULL, mapping = aes(x = .fitted, y = .resid)) +
geom_point()
autoplot(model)
install.packages("gapminder") # run only once
library(tidyverse)
library(gapminder)
gapminder2007 = gapminder %>%
filter(year==2007) %>%
select(country, continent, lifeExp, gdpPercap)
gapminder2007
max(gapminder2007$lifeExp)
min(gapminder2007$lifeExp)
mean(gapminder2007$lifeExp)
summary(gapminder2007$lifeExp)
ggplot(data = gapminder2007, x = lifeExp) +
geom_histogram()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_histogram()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_histogram(bandwidth = 5)
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_line(bandwidth = 5)
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_line()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp, y = n())) +
geom_line()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp, y = count())) +
geom_line()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp, y = NULL)) +
geom_line()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp, y = count(lifeExp))) +
geom_line()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_histogram()
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_histogram(bandwidth = 5)
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_histogram(banwidth = 5)
ggplot(data = gapminder2007, mapping = aes(x = lifeExp)) +
geom_histogram(binwidth = 5)
model = lm(lifeExp~1, data=gapminder2007)
model
gapminder2007 %>%
group_by(continent)
summary(gapminder2007)
summarise(count = n(), mean = mean(lifeExp))
gapminder2007 %>%
group_by(continent) %>%
summarise(count = n(), mean = mean(lifeExp))
ggplot(gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=5) +
facet_wrap(~continent)
gapminder2007 %>%
group_by(continent) %>%
summarise(count = n(), mean = mean(lifeExp-54.8))
gapminder2007 %>%
group_by(continent) %>%
summarise(count = n(), mean = mean(lifeExp-54.8604))
gapminder2007 %>%
group_by(continent) %>%
summarise(count = n(), mean = mean(lifeExp-54.8))
gapminder2007 %>%
group_by(continent) %>%
summarise(count = n(), mean_lifeExp = mean(lifeExp-54.8))
model = lm(lifeExp~continent, data=gapminder2007)
model
model
summary(gapminder2007)
View(gapminder2007)
View(gapminder2007)
model = lm(lifeExp~continent, data=gapminder2007)
model
augment(model)
autoplot(model)
summary(model)
library(tidyverse)
load(url("http://www.openintro.org/stat/data/evals.RData"))
evals = as_tibble(evals) %>%
select(score, age, gender)
summary(evals)
ggscatmat(evals, color="gender")
library(GGally)
ggscatmat(evals, color="gender")
female_evals = filter(evals, gender == 'female')
augment(model)
model = lm(score~age, data = female_evals)
augment(model)
autoplot(model)
summary(model)
male_evals = filter(evals, gender == 'male')
model = lm(score~age, data = male_evals)
augment(model)
autoplot(model)
summary(model)
model = lm(score~age + gender, data = female_evals)
model = lm(score~age + gender, data = evals)
augment(model)
autoplot(model)
summary(model)
model = lm(score~age + gender + age*gender, data = evals)
augment(model)
autoplot(model)
summary(model)
?plotnScree()
library (tidyverse)
library(nycflights13)
?plotnScree()
library(nFactors)
?plotnScree()
?factanal()
?fa.diagram()
?AIC()
d <- matrix(c(0,NA,NA,NA,NA,
2,0,NA,NA,NA,
6,5,0,NA,NA,
10,9,4,0,NA,
9,8,5,3,0)5,5)
d <- matrix(c(0,NA,NA,NA,NA,
2,0,NA,NA,NA,
6,5,0,NA,NA,
10,9,4,0,NA,
9,8,5,3,0)5,5,byrow = TRUE)
library (tidyverse)
d <- matrix(c(0,NA,NA,NA,NA,
2,0,NA,NA,NA,
6,5,0,NA,NA,
10,9,4,0,NA,
9,8,5,3,0)5,5,byrow = TRUE)
d <- matrix(c(0,NA,NA,NA,NA,
2,0,NA,NA,NA,
6,5,0,NA,NA,
10,9,4,0,NA,
9,8,5,3,0),5,5,byrow = TRUE)
rownames(d) <- c("A","B","C","D","E")
colnames(d) <- rownames(d)
d
distmat <- as.dist(d)
dismat
distmat
example <- hclust(distmat)
example
plot(as.dendrogram(distmat))
library(nycflights13)
library(nFactors)
library(ISLR)
library(GGally)
library(datarium)
library(broom)
#install.packages("ggfortify")
library (ggfortify)
library(ISLR)
library(gapminder)
library(GGally)
library(semPlot)
library(GPArotation)
library(paran)
library(GPArotation)
library(semPlot)
plot(as.dendrogram(distmat))
example <- hclust(distmat, method = 'single')
example
plot(as.dendrogram(distmat))
example <- hclust(distmat, method = "single")
example
plot(as.dendrogram(distmat))
plot(as.dendrogram(example))
x1<-c(9,3,7,7,2)
x2<-c(5,2,6,1,1)
bind<-cbind(x1,x2)
rownames(bind) <- c("A","B","C","D","E")
dist <- as.dist(bind, method = "single")
dist <- dist(bind, method = "single")
dist <- dist(bind, method = "euclidian")
rownames(bind) <- c("A","B","C","D","E")
dist <- dist(bind, method = "euclidian")
cluste<- hclust(bind, method = "single")
cluste<- hclust(dist, method = "single")
dist
cluste
d
?cbind()
bind
cluste<- hclust(dist, method = "single")
cluste
?cluste()
?hclust()
plot(as.dendrogram(cluste))
?scale()
?agnes()
# Install the tidyverse package if not already installed
#install.packages("tidyverse”)
library(tidyverse)
# Read PI_Diabetes_Datasample Dataset as csv file and convert to Tibble
strata_sample <- as_tibble(read_csv('PI_Diabetes_Datasample.csv'))
setwd("C:/Users/Sujan Tumbaraguddi/Desktop/Data Science/Assignments")
# Read PI_Diabetes_Datasample Dataset as csv file and convert to Tibble
strata_sample <- as_tibble(read_csv('PI_Diabetes_Datasample.csv'))
library('cluster')
data_clustering <- strata_sample[, 1:8]
methods <- c("single", "complete", "average", "ward")
dist_metrics <- c("manhattan", "euclidean")
results <- list()
results
View(results)
for (method in methods) {
for (dist_metric in dist_metrics) {
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
results
results$`single manhattan`$'Agglomerative coefficient'
print(results)
?hclust()
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(agnes_result$call)
results[[paste(method, dist_metric)]] <- agnes_result
for (method in methods) {
for (dist_metric in dist_metrics) {
print('Method =', method)
print('Dist_matrix =', dist_metric)
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(agnes_result$call)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
print(paste('Method =', method))
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method))
print(paste('Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(agnes_result$call)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(agnes_result$call)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(paste(agnes_result$call))
results[[paste(method, dist_metric)]] <- agnes_result
}
}
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(agnes_result$call)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(agnes_result$ac)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print("Agglomerative coefficient =", agnes_result$ac)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print("Agglomerative coefficient =", agnes_result$ac)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(paste("Agglomerative coefficient:"))
print(agnes_result$ac)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
setwd("C:/Users/Sujan Tumbaraguddi/Desktop")
setwd("C:/Users/Sujan Tumbaraguddi/Desktop/Data Science/Assignments")
setwd("C:/Users/Sujan Tumbaraguddi/Desktop/Data Science/Assignments")
?cat()
# Install the tidyverse package if not already installed
#install.packages("tidyverse”)
library(tidyverse)
# Read PI_Diabetes_Datasample Dataset as csv file and convert to Tibble
strata_sample <- as_tibble(read_csv('PI_Diabetes_Datasample.csv'))
library('cluster')
data_clustering <- strata_sample[, 1:8]
methods <- c("single", "complete", "average", "ward")
dist_matrics <- c("manhattan", "euclidean")
results <- list()
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(paste("Agglomerative coefficient:"))
print(agnes_result$ac)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
# Install the tidyverse package if not already installed
#install.packages("tidyverse”)
library(tidyverse)
# Read PI_Diabetes_Datasample Dataset as csv file and convert to Tibble
strata_sample <- as_tibble(read_csv('PI_Diabetes_Datasample.csv'))
library('cluster')
data_clustering <- strata_sample[, 1:8]
methods <- c("single", "complete", "average", "ward")
dist_matrics <- c("manhattan", "euclidean")
results <- list()
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_clustering, method = method, metric = dist_metric)
print(paste("Agglomerative coefficient:"))
print(agnes_result$ac)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
##1st Relevant selection
# Print and interpret the dendrograms for a selected method and distance metric
selected_method <- "ward"
selected_dist_metric <- "euclidean"
selected_agnes <- results[[paste(selected_method, selected_dist_metric)]]
# Set graphical parameters for a clear and clean plot
par(mfrow=c(1,1), mar=c(6,6,2,2))
# Modify global text size and then plot the dendrogram
par(cex = 0.8)  # Adjust text size here
# Plot the dendrogram with clear labels
plot(selected_agnes, main = paste("Dendrogram - Method:", selected_method, "Distance Metric:", selected_dist_metric), hang = -1)
##2nd Relevant selection
# Print and interpret the dendrograms for a selected method and distance metric
selected_method <- "ward"
selected_dist_metric <- "manhattan"
selected_agnes <- results[[paste(selected_method, selected_dist_metric)]]
##1st Relevant selection
# Print and interpret the dendrograms for a selected method and distance metric
selected_method1 <- "ward"
selected_dist_metric1 <- "euclidean"
selected_agnes1 <- results[[paste(selected_method1, selected_dist_metric1)]]
# Set graphical parameters for a clear and clean plot
par(mfrow=c(1,1), mar=c(6,6,2,2))
# Modify global text size and then plot the dendrogram
par(cex = 0.8)  # Adjust text size here
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1 - Method:", selected_method1, "Distance Metric:", selected_dist_metric1), hang = -1)
# Evaluate clustering results (you can use agnes_result$ac to get the agglomerative coefficient)
cat("Agglomerative coefficient:", selected_agnes1$ac, "\n")
##2nd Relevant selection
# Print and interpret the dendrograms for a selected method and distance metric
selected_method2 <- "ward"
selected_dist_metric2 <- "manhattan"
selected_agnes2 <- results[[paste(selected_method2, selected_dist_metric2)]]
# Plot the dendrogram with clear labels
plot(selected_agnes2, main = paste("Dendrogram_2 - Method:", selected_method2, "Distance Metric:", selected_dist_metric2), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1 - Method:", selected_method1, "Distance Metric:", selected_dist_metric1))
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1 - Method:", selected_method1, "Distance Metric:", selected_dist_metric1), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1 - Method:", selected_method1, "'", "Distance Metric:", selected_dist_metric1), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1 - Method:", selected_method1, ", ", "Distance Metric:", selected_dist_metric1), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1 -- Method:", selected_method1, ", ", "Distance Metric:", selected_dist_metric1), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1: Method -", selected_method1, ", ", "Distance Metric -", selected_dist_metric1), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1: Method =", selected_method1, ", ", "Distance Metric =", selected_dist_metric1), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes1, main = paste("Dendrogram_1: Method -", selected_method1, ", ", "Distance Metric -", selected_dist_metric1), hang = -1)
# Plot the dendrogram with clear labels
plot(selected_agnes2, main = paste("Dendrogram_2: Method -", selected_method2, "Distance Metric -", selected_dist_metric2), hang = -1)
##Task 1.3 (b) Cluster the diabetes measurements (columns) using a combination of distance metric and hierarchical clustering method
# Transpose the data to cluster the measurements (columns)
data_transposed <- t(data_clustering)
for (method in methods) {
for (dist_metric in dist_metrics) {
print(paste('Method =', method,'Dist_matrix =', dist_metric))
agnes_result <- agnes(data_transposed, method = method, metric = dist_metric)
print(paste("Agglomerative coefficient:"))
print(agnes_result$ac)
results[[paste(method, dist_metric)]] <- agnes_result
}
}
# Define the best distance metric and hierarchical clustering method
best_dist_metric <- "manhattan"
best_method <- "ward"
# Perform hierarchical clustering on the transposed data
best_cluster_result <- agnes(data_transposed, method = best_method, metric = best_dist_metric)
# Plot the dendrogram for feature clustering
par(mfrow=c(1, 1))
plot(best_cluster_result, main = paste("Dendrogram: Method -", best_method, ", ", "Distance Metric -", best_dist_metric), hang = -1)
# Evaluate clustering results for feature clustering (agglomerative coefficient)
cat("Agglomerative coefficient for feature clustering:", best_cluster_result$ac, "\n")
